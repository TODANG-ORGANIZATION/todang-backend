pipeline {
    agent any

    environment {
        // Docker Hub 계정 정보
        DOCKER_HUB_CREDENTIALS = 'd102dd8b-4e0e-4f94-8c21-514ef7c8bd09'
        DOCKER_IMAGE_NAME = 'kimyeonsu/todang-app'
        DOCKER_IMAGE_TAG = "latest"

        // GitHub 정보
        GIT_BRANCH = 'main'

        // 배포 서버 정보
        DEPLOY_SERVER = 'i12a701.p.ssafy.io'
        DEPLOY_USER = 'ubuntu'
    }

    options {
        timeout(time: 1, unit: 'HOURS')
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${GIT_BRANCH}",
                    url: 'https://github.com/kim-yeonsu/todang-app.git'
            }
        }

        stage('Build') {
            steps {
                // Docker Compose 빌드
                sh "docker-compose build"
            }
        }

        /* stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS}",
                                              usernameVariable: 'DOCKER_USER',
                                              passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                    sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                }
            }
        }

        stage('Deploy') {
            steps {
                sshagent(['deployment-key']) {
                    // docker-compose.yml 파일 전송
                    sh "scp -o StrictHostKeyChecking=no docker-compose.yml ${DEPLOY_USER}@${DEPLOY_SERVER}:~/"

                    // 배포 스크립트 실행
                    sh """
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_SERVER} '
                            # Docker Hub 로그인
                            echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin

                            # 이전 컨테이너 중지 및 제거
                            docker-compose down || true

                            # 새 이미지 풀 및 컨테이너 시작
                            docker-compose pull
                            docker-compose up -d

                            # 사용하지 않는 이미지 정리
                            docker image prune -f
                        '
                    """
                }
            }
        }  */
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}